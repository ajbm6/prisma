<?xml version="1.0" encoding="UTF-8"?>
<project name="webapp" default="noop">

    <target name="noop"/>
    <property environment="env"/>

    <tstamp>
        <format property="now" pattern="yyyy-MM-dd HH:mm:ss" locale="en,UK"/>
        <format property="now_num" pattern="yyyyMMddHHmmss" locale="en,UK"/>
        <format property="now_file" pattern="yyyy-MM-dd_HHmmss" locale="en,UK"/>
    </tstamp>

    <!-- By default, we assume all tools to be on the $PATH -->
    <condition property="ext" value=".bat">
        <os family="windows"/>
    </condition>

    <target name="cc" description="Clear application cache">
        <echo>Clear cache</echo>
        <delete dir="${basedir}/tmp/cache/"/>
        <mkdir dir="${basedir}/tmp/cache"/>
        <chmod file="${basedir}/tmp/cache" perm="775"/>
        <delete dir="${basedir}/tmp/log/"/>
        <mkdir dir="${basedir}/tmp/log"/>
        <chmod file="${basedir}/tmp/log" perm="775"/>

        <delete includeemptydirs="true">
            <fileset dir="${basedir}/web/cache">
                <include name="**/*"/>
                <exclude name=".htaccess"/>
            </fileset>
        </delete>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l"/>

            <fileset dir="${basedir}/src">
                <include name="**/*.php"/>
                <!-- exclude the tests directory, repeat line below to exclude more -->
                <exclude name="tests/**"/>
                <exclude name="vendor/**"/>
                <modified/>
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="apigen" description="Generate API documentation using ApiGen">
        <delete dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/api"/>
        <exec executable="${basedir}/vendor/bin/apigen${ext}" searchpath="true" resolveexecutable="true"
              failonerror="true">
            <arg line="generate -s ${basedir}/src -d ${basedir}/build/api --exclude *.html.php,env.example.phps,env.php"/>
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true"
              failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
        </exec>
    </target>

    <target name="phpunit-coverage" description="Run unit tests with PHPUnit with coverage">
        <delete dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true"
              failonerror="true" taskname="phpunit-coverage">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
            <arg value="--coverage-clover"/>
            <arg path="${basedir}/build/logs/clover.xml"/>
            <arg value="--coverage-html"/>
            <arg path="${basedir}/build/coverage"/>
        </exec>
    </target>

    <target name="phstan" description="PHP Static Analysis Tool - discover bugs in your code without running it">
        <exec executable="${basedir}/vendor/bin/phpstan${ext}" searchpath="true" resolveexecutable="true"
              failonerror="true" taskname="phpunit-coverage">
            <arg value="analyse"/>
            <arg value="-l"/>
            <arg value="5"/>
            <arg value="-c"/>
            <arg path="${basedir}/phpstan.neon"/>
            <arg value="src"/>
            <arg value="tests"/>
            <arg value="--no-interaction"/>
            <arg value="--no-progress"/>
        </exec>
    </target>

    <target name="php-cs-fixer" description="Code style fixer">
        <mkdir dir="${basedir}/build"/>
        <get src="https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.0.0/php-cs-fixer.phar"
             dest="${basedir}/build/php-cs-fixer.phar" skipexisting="true"/>
        <exec executable="php" searchpath="true" resolveexecutable="true">
            <arg value="${basedir}/build/php-cs-fixer.phar"/>
            <arg value="fix"/>
            <arg value="${basedir}/src/"/>
            <arg value="--rules=@PSR2"/>
            <arg value="--using-cache=no"/>
        </exec>
        <exec executable="php" searchpath="true" resolveexecutable="true">
            <arg value="${basedir}/build/php-cs-fixer.phar"/>
            <arg value="fix"/>
            <arg value="${basedir}/tests/"/>
            <arg value="--rules=@PSR2"/>
            <arg value="--using-cache=no"/>
        </exec>
    </target>

    <target name="build" depends="lint,phpunit">
        <!-- Load properties -->
        <property file="${basedir}/config/ant.properties"/>

        <!-- Get composer.phar if not existing -->
        <get src="https://getcomposer.org/composer.phar" dest="${basedir}/build/composer.phar" skipexisting="true"/>

        <!-- Delete build/master -->
        <delete dir="${basedir}/build/master"/>

        <!-- Get master branch from GitHub -->
        <exec executable="git" failonerror="true">
            <arg line="archive --format zip --output ${basedir}/build/master.zip master"/>
        </exec>

        <!-- Unzip master branch -->
        <unzip src="${basedir}/build/master.zip" dest="${basedir}/build/master/"/>

        <!-- Delete zipped master branch -->
        <delete file="${basedir}/build/master.zip"/>

        <!-- Install composer packages -->
        <exec executable="php" failonerror="true">
            <arg line="${basedir}/build/composer.phar install --no-dev --optimize-autoloader -d ${basedir}/build/master"/>
        </exec>

        <!-- Remove files which aren't needed on the server -->
        <delete file="${basedir}/build/master/.codeclimate.yml"/>
        <delete file="${basedir}/build/master/.editorconfig"/>
        <delete file="${basedir}/build/master/.editorconfig.dist"/>
        <delete file="${basedir}/build/master/.gitignore"/>
        <delete file="${basedir}/build/master/.gitignore.dist"/>
        <delete file="${basedir}/build/master/.styleci.yml"/>
        <delete file="${basedir}/build/master/LICENSE"/>
        <delete file="${basedir}/build/master/build.xml"/>
        <delete file="${basedir}/build/master/phpstan.neon"/>
        <delete file="${basedir}/build/master/README.md"/>
        <delete file="${basedir}/build/master/composer.json"/>
        <delete file="${basedir}/build/master/composer.lock"/>
        <delete file="${basedir}/build/master/phpunit.xml"/>
        <delete file="${basedir}/build/master/config/env.php"/>
        <delete file="${basedir}/build/master/config/ant.prod.properties"/>
        <delete file="${basedir}/build/master/config/ant.test.properties"/>
        <delete file="${basedir}/build/master/config/ant.staging.properties"/>
        <delete file="${basedir}/build/master/config/example.ant.properties"/>

        <!-- Remove folders which aren't needed on the server -->
        <delete dir="${basedir}/build/master/tests"/>
        <delete dir="${basedir}/build/master/docs"/>
        <delete dir="${basedir}/build/master/vendor/monolog/monolog/doc"/>
        <delete dir="${basedir}/build/master/vendor/monolog/monolog/tests"/>
        <delete dir="${basedir}/build/master/vendor/dflydev/dot-access-data/tests"/>
        <delete dir="${basedir}/build/master/vendor/league/plates/docs"/>
        <delete dir="${basedir}/build/master/vendor/league/plates/example"/>
        <delete dir="${basedir}/build/master/vendor/phpmailer/phpmailer/examples"/>
        <delete dir="${basedir}/build/master/vendor/symfony/cache/Tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/config/Tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/http-foundation/Tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/routing/Tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/translation/Tests"/>

        <!-- Zip master brunch -->
        <zip destfile="${basedir}/build/${build.filename}">
            <zipfileset dir="${basedir}/build/master"/>
        </zip>
    </target>

    <target name="deploy" depends="build" description="Build and deploy project">

        <!-- Chose between test, staging and prod environment -->
        <input message="Which config should be used?" validArgs="test, staging, prod" addproperty="config"/>

        <!-- Load properties -->
        <property file="${basedir}/config/ant.${config}.properties"/>

        <!-- Upload zip file-->
        <echo message="Uploading ${build.filename}"/>
        <scp file="${basedir}/build/${build.filename}"
             todir="${build.ftp.username}:${build.ftp.password}@${build.ftp.host}:${build.ftp.path}"
             trust="true"/>

        <!-- Upload deploy.php -->
        <echo message="Uploading deploy.php"/>
        <scp file="${basedir}/build/master/config/deploy.php"
             todir="${build.ftp.username}:${build.ftp.password}@${build.ftp.host}:${build.ftp.path}"
             trust="true"/>

        <!-- Execute deploy.php on the server -->
        <!-- sshexec requires JSch
          Download: https://netcologne.dl.sourceforge.net/project/jsch/jsch.jar/0.1.54/jsch-0.1.54.jar
          Copy jsch-0.1.54.jar to c:\xampp\ant\lib

          Run: sudo visudo
          Add this line at the end (change “username” to your username):
          username ALL=(ALL) NOPASSWD: ALL
        -->
        <sshexec host="${build.ftp.host}"
                 username="${build.ftp.username}"
                 password="${build.ftp.password}"
                 command="cd ${build.ftp.path};php deploy.php ${build.filename}"
                 trust="true"
        />

        <!-- Delete build/master -->
        <!--<delete dir="${basedir}/build/master"/>-->

        <!-- Delete zip file -->
        <!-- <delete file="${basedir}/build/${build.filename}"/> -->
    </target>

</project>
