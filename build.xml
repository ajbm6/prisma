<?xml version="1.0" encoding="UTF-8"?>
<project name="webapp" default="noop">
    
    <target name="noop"/>
    <property environment="env"/>
    
    <condition property="is_windows">
        <os family="windows"/>
    </condition>
    
    <tstamp>
        <format property="now" pattern="yyyy-MM-dd HH:mm:ss" locale="en,UK"/>
        <format property="now_num" pattern="yyyyMMddHHmmss" locale="en,UK"/>
        <format property="now_file" pattern="yyyy-MM-dd_HHmmss" locale="en,UK"/>
    </tstamp>
    
    <!-- By default, we assume all tools to be on the $PATH -->
    <condition property="ext" value=".bat">
        <os family="windows"/>
    </condition>

    <!-- DISPLAYS WINDOWS OS -->
    <target name="display_windows" if="is_windows" >
        <echo message="OS Family is: Windows" />
    </target>
    
    <target name="build" depends="build-prepare,lint,phpunit,build-zip"/>
    <target name="build-full" depends="build-prepare,lint,phpmd-ci,phpcpd-ci,phpunit-coverage,apigen,build-zip"/>

    <target name="build-zip" description="Build artifact">
        <exec executable="git" failonerror="true">
            <arg line="archive --format zip --output ${basedir}/build/master.zip master" />
        </exec>
        <unzip src="${basedir}/build/master.zip" dest="${basedir}/build/master/"/>

        <antcall target="build-composer"></antcall>
        
        <exec executable="php" dir="${basedir}/build/master" searchpath="true" resolveexecutable="true">
            <arg line="${basedir}/build/master/composer.phar install --no-dev --optimize-autoloader"/>
        </exec>
        
        <antcall target="build-clean"></antcall>
        
        <zip 
            destfile="${basedir}/build/${now_file}_dist.zip" 
            basedir="${basedir}/build/master/"
            excludes=".git/**, .gitignore/**, **/*.ipr, **/*.iws, **/*.iml"
        />
        <!-- cleanup -->
        <!-- <delete dir="${basedir}/build/master"/> -->
    </target>
    
    <target name="build-delete" description="Cleanup build artifacts">
        <!-- <delete dir="${basedir}/vendor"/>
        <delete file="${basedir}/composer.lock"/> -->
        <delete dir="${basedir}/build"/>
    </target>
 
    <target name="build-prepare" description="Prepare for build">
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/master"/>
        <mkdir dir="${basedir}/build"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/master"/>
    </target>
    
    <target name="cc" description="Clear application cache">
        <echo>Clear cache</echo>
        <delete dir="${basedir}/tmp/cache/"/> 
        <mkdir dir="${basedir}/tmp/cache"/>
        <chmod file="${basedir}/tmp/cache" perm="775"/>
        <delete dir="${basedir}/tmp/log/"/> 
        <mkdir dir="${basedir}/tmp/log"/>
        <chmod file="${basedir}/tmp/log" perm="775"/>
        
        <delete includeemptydirs="true">
            <fileset dir="${basedir}/public/cache">
                <include name="**/*"/>
                <exclude name=".htaccess"/>
            </fileset>
        </delete>
    </target>
    
    <condition property="is_windows">
        <os family="windows"/>
    </condition>
    <condition property="is_linux">
        <os family="unix" />
    </condition>
     
    <target name="build-composer" description="Install dependencies with Composer">
        <tstamp>
            <format property="thirty.days.ago" pattern="MM/dd/yyyy hh:mm aa" offset="-30" unit="day"/>
        </tstamp>
        <delete>
            <fileset dir="${basedir}/build/master">
                <include name="composer.phar" />
                <date datetime="${thirty.days.ago}" when="before"/>
            </fileset>
        </delete>

        <get src="https://getcomposer.org/composer.phar" dest="${basedir}/build/master/composer.phar" skipexisting="true"/>

        <exec executable="php" searchpath="true" resolveexecutable="true">
            <arg value="${basedir}/build/master/composer.phar"/>
            <arg value="selfupdate"/>
        </exec>
    </target>
    
    <target name="build-clean" description="Cleanup comoser from build">
        <delete file="${basedir}/build/master.zip"/>
        <delete file="${basedir}/build/master/composer.phar"/>
        <delete file="${basedir}/build/master/.editorconfig"/>
        <delete file="${basedir}/build/master/.gitattributes"/>
        <delete file="${basedir}/build/master/.gitignore"/>
        <delete file="${basedir}/build/master/composer.json"/>
        <delete file="${basedir}/build/master/composer.lock"/>
        <delete file="${basedir}/build/master/LICENSE.md"/>
        <delete file="${basedir}/build/master/README.md"/>
        <delete file="${basedir}/build/master/build.xml"/>
        <delete file="${basedir}/build/master/phpunit.xml"/>
        <delete file="${basedir}/build/master/.coveralls.yml"/>
        <delete file="${basedir}/build/master/.scrutinizer.yml"/>
        <delete file="${basedir}/build/master/.travis.yml"/>
        <delete file="${basedir}/build/master/src/Config/env.php"/>
        <delete file="${basedir}/build/master/src/Config/env.example.php"/>
        <delete dir="${basedir}/build/master/tests"/>
        <delete dir="${basedir}/build/master/_doc"/>
        <!-- clean vendor -->
        <delete dir="${basedir}/build/master/vendor/doctrine/inflector/tests"/>
        <delete dir="${basedir}/build/master/vendor/monolog/monolog/doc"/>
        <delete dir="${basedir}/build/master/vendor/monolog/monolog/tests"/>
        <delete dir="${basedir}/build/master/vendor/nikic/fast-route/test"/>
        <delete dir="${basedir}/build/master/vendor/odan/molengo/tests"/>
        <delete dir="${basedir}/build/master/vendor/odan/molengo/.git" failonerror="false"/> 
        <delete dir="${basedir}/build/master/vendor/phpmailer/phpmailer/docs"/>
        <delete dir="${basedir}/build/master/vendor/phpmailer/phpmailer/examples"/>
        <delete dir="${basedir}/build/master/vendor/phpmailer/phpmailer/test"/>
        <delete dir="${basedir}/build/master/vendor/psr/log/Psr/Log/Test"/>
        <delete dir="${basedir}/build/master/vendor/robmorgan/phinx/docs"/>
        <delete dir="${basedir}/build/master/vendor/robmorgan/phinx/tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/config/Tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/console/Tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/event-dispatcher/Tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/filesystem/Tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/http-foundation/Tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/translation/Tests"/>
        <delete dir="${basedir}/build/master/vendor/symfony/yaml/Tests"/>
        <delete dir="${basedir}/build/master/vendor/tubalmartin/cssmin/tests"/>
    </target>
    
    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
 
            <fileset dir="${basedir}">
                <include name="**/*.php" />
                <!-- exclude the tests directory, repeat line below to exclude more -->
                <exclude name="tests/**" /> 
                <exclude name="vendor/**" /> 
                <modified />
            </fileset>
 
            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>
    
    <target name="phploc-ci" description="Measure project size using PHPLOC">
        <!-- <exec executable="phploc"> -->
        <exec executable="phploc${ext}" searchpath="true" resolveexecutable="true">
            <!-- exclude tests directory -->
            <arg value="--count-tests" />
            <arg value="--exclude" />
            <arg path="${basedir}/tests" />
            <arg value="--log-csv" />
            <arg value="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <delete dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <!-- <exec executable="pdepend"> -->
        <exec executable="pdepend${ext}" searchpath="true" resolveexecutable="true">
            <arg value="--ignore=${basedir}/tests/,${basedir}/docs/,${basedir}/vendor/" />
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg value="${basedir}" />
        </exec>
    </target>
    
    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <!-- <exec executable="phpmd"> -->
        <exec executable="phpmd${ext}" searchpath="true" resolveexecutable="true">
            <arg path="${basedir}" />
            <arg value="xml" />
            <arg value="codesize" />
            <arg value="--reportfile" />
            <arg value="${basedir}/build/logs/pmd.xml" />
            <arg value="--exclude" />
            <arg value="${basedir}\tests,${basedir}\vendor" />
        </exec>
    </target>

    <target name="phpcs-ci"
            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <!-- <exec executable="phpcs" output="/dev/null"> -->
        <exec executable="phpcs${ext}" searchpath="true" resolveexecutable="true" taskname="phpcs">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--ignore=${basedir}/tests" />
            <arg value="--extensions=php" />
            <arg path="${basedir}" />
        </exec>
    </target>
    
    <target name="phpcpd-ci" description="Find duplicate code using PHPCPD">
        <!-- <exec executable="phpcpd"> -->
        <exec executable="phpcpd${ext}" searchpath="true" resolveexecutable="true">
            <arg value="--log-pmd" />
            <arg value="${basedir}/build/logs/pmd-cpd.xml" />
            <arg value="--exclude" />
            <arg path="${basedir}/tests" />
            <arg path="${basedir}/src" />
        </exec>
    </target>
    
    <target name="apigen" description="Generate API documentation using ApiGen">
        <delete dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/api"/>
        <exec executable="apigen${ext}" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg line="generate -s ${basedir}/src -d ${basedir}/build/api --skip-doc-path *.html.php,Local.Example.phps,Local.php" />
        </exec>
    </target>
       
    <target name="phpunit" depends="build-prepare" description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true" failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
        </exec>
    </target>
    
    <target name="phpunit-coverage" depends="build-prepare" description="Run unit tests with PHPUnit with coverage">
        <delete dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true" failonerror="true" taskname="phpunit-coverage">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
            <arg value="--coverage-clover"/>
            <arg path="${basedir}/build/logs/clover.xml"/>
            <arg value="--coverage-html"/>
            <arg path="${basedir}/build/coverage"/>
        </exec>
    </target>
    
    <target name="phpcb" depends="build-prepare" description="Aggregate tool output with PHP_CodeBrowser">
        <delete dir="${basedir}/build/code-browser"/>
        <mkdir dir="${basedir}/build/code-browser"/>
        <exec executable="phpcb${ext}">
            <arg value="--log" />
            <arg path="${basedir}/build/logs" />
            <arg value="--ignore" />
            <arg path="${basedir}/tests" />
            <arg value="--source" />
            <arg path="${basedir}/src" />
            <arg value="--output" />
            <arg path="${basedir}/build/code-browser" />
        </exec>
    </target>
    
    <target name="migration-status" description="Get migration status">
        <exec executable="php" dir="${basedir}/bin" failonerror="true">
            <arg value="${basedir}/bin/migration.php" />
            <arg value="status" />
        </exec>
    </target>
    <target name="migration-migrate" description="Run database migrations">
        <exec executable="php" dir="${basedir}/bin" failonerror="true">
            <arg value="${basedir}/bin/migration.php" />
            <arg value="migrate" />
        </exec>
    </target>
    <target name="migration-rollback" description="Rollback to the previous migration">
        <exec executable="php" dir="${basedir}/bin" failonerror="true">
            <arg value="${basedir}/bin/migration.php" />
            <arg value="rollback" />
        </exec>
    </target>
          
</project>
